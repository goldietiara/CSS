/* esternal stylesheet 
is the most common and usefull method
we can link a single file css to many html files

CSS selectors:
1. h1{}        = type selector or an elemet selector, only select with the same element
2. #id{}       = id selector, select the element with the same id
3. .class{}    = class selector, select the elemet with the same class name
4. *{}         = universal selector, select all the element, usualy used to reset properties that the browser adds by default 
*/

.ExStyle {
  color: LightSkyBlue;
}

/* style decleration 
color: u can use HEX, RGB, or Color Name*/

/* HEX */
.HEX {
  color: #cacafc;
}
/* RGB*/
.RGB {
  color: rgb(152, 251, 152);
}
/* Color Name*/
.ColName {
  color: PeachPuff;
}

/* div */
.div {
  background-color: #fbe3eb;
  color: white;
  font-size: 19pt;
}
/* span */
.span {
  background-color: #ffe4e1;
  color: white;
  font-size: 19pt;
}

/* fontstyles
some browser or operating system might not support your font (if its too unique)
hence we'll add web safe font as a backup font

vscode had an auto completing web safe fonts for a few fonrt families*/

.FStyle1 {
  font-family: "Courier New", Courier, monospace;
}
.FStyle2 {
  font-family: "Courier New", Courier, monospace;
  font-style: italic;
  font-weight: lighter;
  text-decoration: underline;
  font-size: 25pt;
}

/* text layout properties */
.LayProp1 {
  background-color: #e6e6fa;
  color: #9370db;
  text-align: center;
  line-height: 2;
  letter-spacing: 2px;
}
.LayProp2 {
  background-color: #f5f5dc;
  color: #808000;
  text-align: right;
  line-height: 4;
  letter-spacing: 1px;
}

/* list styles 
disc    = default
circle  = hollow disk (?) like dounuts..
squere  = square
none    = to remove the bulet point

it has default spacing, to remove it set the margin and padding to 0
*/
.StyLists {
  background-color: #ffddd9;
  color: white;
  font-size: 19pt;
  list-style-type: square;
  /* margin: 0;
  padding: 0; */
}

/* CSS box model 
content > padding > border > margin */
.boxModel {
  background-color: #fff0f5;
  color: #66cdaa;
  text-align: center;
  padding: 10px;
  border: 10px solid #f0fff0;
  margin: 10px;
  height: 100px;
  width: 600px;
}

/* cascade // specificity // inherit
if we had 2 or more elemet selector (with the same elemet), it will applied the last elemet selector
unless if ure using class selector then it will go with the class selector, cuz class selector is more spesific
even if the last selector is the element selector, but if there is an id selector then it will applied to the id selector

!!the point it he will be applied to a more specific selector!!
so it will goes like this: 
1. (if any selector added) !important
2. inline style
3. id
4. class
5. elemet
*/
h3 {
  color: #66cdaa;
}
h3 {
  color: #87cefa;
}

.class {
  color: #66cdaa;
}
#id {
  color: #d8bfd8;
}
h4 {
  color: #87cefa;
}

.class {
  color: #66cdaa;
}
#id {
  color: #d8bfd8;
}
h5 {
  color: #faf287;
}
h5 {
  color: #87cefa !important;
}

/* styling tables */
table {
  border-collapse: collapse;
  width: 60%;
  text-align: center;
}

th,
td {
  border-bottom: 3px solid #ffffff;
  padding: 20px;
  color: #483d8b;
  background-color: #e6e6fa;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

th {
  font-size: 15pt;
}

td {
  color: #9370db;
}

/* display 
block   = select the full width of the screen
inline  = only select the nesessary width
none    = content is hidden (not going to be display)*/
.display1 {
  border: 5px solid #f0fff0;
  font-size: 19pt;
  color: #ffc0cb;
  margin-bottom: 10px;
}
.display2 {
  border: 5px solid #fff0f5;
  font-size: 19pt;
  color: #dda0dd;
  margin-bottom: 10px;
  display: inline;
}
.display3 {
  border: 5px solid #e0ffff;
  font-size: 19pt;
  color: #afeeee;
  margin-bottom: 10px;
}

/* layout 
position ststic    = position according to the normar flow of the page
position relative  = relative to its normal position, the original position will left a gap on the page and cannot be field
position fixed     = position that relative to the view board, usualy used of navbar
position absolute  = position will stay according to the given position (the first view board (?))
*/
.layout1 {
  background-color: #fff0f5;
  font-size: 19pt;
  color: #dda0dd;
  margin-bottom: 10px;
  position: relative;
  top: 100px;
  left: 100px;
}
.layout2 {
  background-color: #fffff0;
  font-size: 19pt;
  color: #ffc0cb;
  margin-bottom: 10px;
  position: static;
}
.layout3 {
  background-color: #e0ffff;
  font-size: 19pt;
  color: #40e0d0;
  margin-bottom: 10px;
  position: fixed;
  bottom: 10px;
  right: 10px;
}

.layout4 {
  background-color: #e0ffff;
  font-size: 19pt;
  color: #40e0d0;
  position: absolute;
  bottom: 0px;
  right: 0px;
}
.layoutContainer {
  margin-bottom: 100px;
  position: relative;
  top: 100px;
  width: 900px;
  height: 100px;
  background-color: #dda0dd;
}

/* CSS units 
em    = font size (of the parent or elemet itself) other case: witdh
        1em equal one size of the elemet, of its parent
ex    = x-height of the element's font
ch    = the advance measure (width) of the glyph "0" of the element's font
rem   = for size of the foot element
        1rem equal to one size of the html elemet, which is 16px BY DEFAULT
1h    = line height of the element
vw    = 1% of the view point's width
        % of the viewport width
vh    = 1% of the view point's height
        % of the viewport height
vmin  = 1% of the view point's smaller dimention
vmax  = 1% of the view point's larger dimention
*/
.unitsContainer {
  margin: 10px;
  border: 10px solid #f0fff0;
  padding: 10px;
  height: 600px;
  width: 800px;
  background-color: #fff0f5;
  color: #66cdaa;
  text-align: center;
}
.unitsEm {
  padding-bottom: 10px;
  background-color: #66cdaa;
  color: #f0fff0;
  font-size: 20px;
  height: 3em;
}
.emChild {
  padding-bottom: 10px;
  color: #f0fff0;
  font-size: 1.3em;
}
.unitsRem {
  color: #66cdaa;
  font-size: 2rem;
}
.unitsVh {
  padding-bottom: 10px;
  background-color: #66cdaa;
  color: #f0fff0;
  font-size: 20px;
  height: 50vh;
}
.unitsVw {
  padding-bottom: 10px;
  background-color: #66cdaa;
  color: #f0fff0;
  font-size: 20px;
  width: 50vw;
}

/* math property function
can be used as property values */
.mathCalc {
  height: calc(50vh - 300px);
  padding-bottom: 10px;
  background-color: #e6e6fa;
  color: #9370db;
  text-align: center;
}
.noMath {
  height: 200px;
  padding-bottom: 10px;
  background-color: #e0ffff;
  color: #00ced1;
  text-align: center;
}
.mathMax {
  height: max(50vh, 200px);
  padding-bottom: 10px;
  background-color: #fffff0;
  color: #ffdead;
  text-align: center;
}
.mathMin {
  height: min(50vh, 200px);
  /* reduce 50% */
  padding-bottom: 10px;
  background-color: #fffafa;
  color: #9370db;
  text-align: FFB6C1;
}
